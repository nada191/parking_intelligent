#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.16
# In conjunction with Tcl version 8.6
#    Jul 13, 2020 09:18:00 PM CEST  platform: Windows NT

import sys

from tkinter.font import Font
from math import ceil
from tkinter import PhotoImage
from calendar import calendar
from datetime import datetime,timedelta
from tkinter import messagebox

import time 
from _ast import Nonlocal

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import parking_support
import par2
import testtip
#import Log

try:#date de reservation
    from Tkinter import Tk, Frame, Label
except ImportError:
    from tkinter import Tk, Frame, Label
    import locale


from tkcalendar import *
from tkinter import messagebox


def vp_start_gui(L=[],fenetre=None):
    '''Starting point when module is the main routine.'''
    global val, w, root,parent
    parent=fenetre  # c'est la première fenetre (page login)
    root = Tk()
    top = Intelligent_Parking (root,L)
    parking_support.init(root, top)
    root.mainloop()

w = None
def create_Intelligent_Parking(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Intelligent_Parking (w)
    parking_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Intelligent_Parking():
    global w
    w.destroy()
    w = None

class Intelligent_Parking:
    
    def __init__(self, top=None,L=[]):
        self.L=L
        global nbL ,nbC , l , h ,r,a ,b
    
        nbL=int(self.L[0]) #nombre de lignes
        nbC=int(self.L[1]) #nombre de colonnes
        if nbC % 2 ==0 :
            r=nbC//2 +4
        else:
            r=nbC//2 + 5 
        l=50  # c'est le longeur d'une case (représentée par un rectangle)
        h=30  # c'est la largeur d'une case
        #a et b sont le padding a droite et en haut pour que le parking soit centré dans le canvas
        if (nbL+5)*h>(0.76*620):
            a=5                              
        else:
            a=(0.76*620-(nbL+5)*h)/2
            
        if (nbC+r)*l>630:
            b=5
        else:
            b=(630-(nbC+r)*l)/2
        global par 
        #par2.no=self.L[2]
        #par2.nr=self.L[3]
        if len(self.L)==2 :   #créer un parking vide
            par=par2.Parking(nbL,nbC,True)
        else :          #créer un parking non vide
            par=par2.Parking(nbL,nbC,False,int(self.L[2]),int(self.L[3]))
            par.afficher()
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font9 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.top=top
        top.geometry("1270x620")#change
        top.title("Intelligent Parking")
        top.configure(background="#d9d9d9")#color!
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        
        
        def About():  # pour afficher un message en cliquant sur "Aide"
            messagebox.showinfo("Aide", "Vous pouvez manipuler ce parking en choisissant au moins une des opérations suivantes:\n -Occuper pour faire entrer une voiture dans le parking.\n -Vider pour faire sortir une voiture.\n -Reserver pour faire une réservation.\n -Annuler pour annuler une réservation.\nEnfin, Veuillez cliquer sur valider.")
        def Back():   #pour retourner a la page précédente en cliquant sur "Retourner"
            MsgBox = messagebox.askquestion ('Retourner',"Voullez-vous retourner à  la page précédente ?",icon = 'error')
            if MsgBox == 'yes':
                top.destroy()
                parent.deiconify()
        def Exit():  #pour quitter l'application en cliquant sur "Quitter"
            MsgBox = messagebox.askquestion ('Quitter',"Voullez-vous quitter l'application ?",icon = 'error')
            if MsgBox == 'yes':
                top.destroy()
                parent.destroy()        
        
        """Création du menu """                             
        self.menubar = Menu(top,font=font9,bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)
        self.menubar.add_command(label="Aide", command=About)
        top.config(menu=self.menubar)
        self.menubar.add_command(label="Retourner", command=Back)
        top.config(menu=self.menubar)       
        self.menubar.add_command(label="Quitter", command=Exit)
        top.config(menu=self.menubar)
        
        """Création de la barre de défilement """
       
       
        self.Canvas1 = Canvas(top, scrollregion=(0,0,(nbC+r)*l+16,(nbL+5)*h+15))
        ho=Scrollbar(self.Canvas1,command=self.Canvas1.xview, orient="horizontal")
    
        v=Scrollbar(self.Canvas1,command=self.Canvas1.yview ,orient="vertical")
        
        
        self.Canvas1.pack(side=LEFT)
        if (nbL+5)*h>(0.76*620):
            v.pack(side= RIGHT , fill=Y)
        
        if (nbC+r)*l>630:
            ho.pack(side=BOTTOM, fill=X)
        
        self.Canvas1.configure(yscrollcommand=v.set)
        self.Canvas1.configure(xscrollcommand=ho.set)
        self.Canvas1.configure(yscrollincrement='4')
        self.Canvas1.configure(xscrollincrement='4')
        
        self.Canvas1.place(relx=0.06, rely=0.22, relheight=0.76, relwidth=0.6)
    
        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief=RIDGE)
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")
       
        
       
        
        
        Can=Canvas(self.top,width=404,height=359)
        
        Can.place(relx=0.67, rely=0.22)
        Can.configure(background="#d9d9d9")
        global im
        im =PhotoImage(file='legend1.png',master=self.Canvas1)
        Can.create_image(0,0,image=im,anchor="nw") 
       
        
        
        
        
        
        f=Font(family='Helvetica', size=15, weight='bold')
    #//////////////////////////////////////////////////
        def reste_occuper():   #permet d'afficher le champ de saisie de la matricule une fois le bouton "Occuper" est pressé
            """Création du label "Matricule" """
            self.Label3_1 = Label(top)
            self.Label3_1.place(relx=0.003, rely=0.067, height=21, width=100)
            self.Label3_1.configure(activebackground="#f9f9f9")
            self.Label3_1.configure(activeforeground="black")
            self.Label3_1.configure(background="#d9d9d9")
            self.Label3_1.configure(disabledforeground="#a3a3a3")
            
            self.Label3_1.configure(foreground="#000000")
            self.Label3_1.configure(highlightbackground="#d9d9d9")
            self.Label3_1.configure(highlightcolor="black")
            self.Label3_1.configure(text='''Matricule :''')

            """Champ de saisie de la matricule """
            self.matriculeocc = Entry(top)
            self.matriculeocc.place(relx=0.07, rely=0.067,height=20, relwidth=0.16)
            self.matriculeocc.configure(background="white")
            self.matriculeocc.configure(disabledforeground="#a3a3a3")
            
            self.matriculeocc.configure(foreground="#000000")
            self.matriculeocc.configure(highlightbackground="#d9d9d9")
            self.matriculeocc.configure(highlightcolor="black")
            self.matriculeocc.configure(insertbackground="black")
            self.matriculeocc.configure(selectbackground="#c4c4c4")
            self.matriculeocc.configure(selectforeground="black")
            self.occuper.click = True
            valider()
        
        """Création du bouton "Occuper" """ 
        self.occuper = Button(top)#occuper
        self.occuper.click = False
        self.occuper.place(relx=0.05, rely=0.01, height=34, width=87)
        self.occuper.configure(activebackground="#d9d9d9")
        self.occuper.configure(activeforeground="#000000")
        self.occuper.configure(background="#e1e9f0")#change color
        self.occuper.configure(disabledforeground="#a3a3a3")
        #f=Font(family='Helvetica', size=15, weight='bold')
        self.occuper.configure(font=f)
        self.occuper.configure(foreground="#000000")
        self.occuper.configure(highlightbackground="#d9d9d9")
        self.occuper.configure(highlightcolor="black")
        self.occuper.configure(pady="0")
        self.occuper.configure(text='''Occuper''',command=reste_occuper)
        testtip.Tooltip(self.occuper,text="Pour faire entrer votre voiture dans le parking veuillez cliquer sur ce bouton et saisissez votre matricule")       
        
        def reste_vider():   #permet d'afficher les champ de saisie de la matricule une fois le bouton "Vider" est pressé 
            """Création du label "Matricule" """
            self.Label3_2 = Label(top)
            self.Label3_2.place(relx=0.246, rely=0.067, height=21, width=104)
            self.Label3_2.configure(activebackground="#f9f9f9")
            self.Label3_2.configure(activeforeground="black")
            self.Label3_2.configure(background="#d9d9d9")
            self.Label3_2.configure(disabledforeground="#a3a3a3")
           
            self.Label3_2.configure(foreground="#000000")
            self.Label3_2.configure(highlightbackground="#d9d9d9")
            self.Label3_2.configure(highlightcolor="black")
            self.Label3_2.configure(text='''Matricule :''')

            """ Champ de saisie de la matricule """
            self.matriculevider = Entry(top)
            self.matriculevider.place(relx=0.317, rely=0.067,height=20, relwidth=0.16)
            self.matriculevider.configure(background="white")
            self.matriculevider.configure(disabledforeground="#a3a3a3")
           
            self.matriculevider.configure(foreground="#000000")
            self.matriculevider.configure(highlightbackground="#d9d9d9")
            self.matriculevider.configure(highlightcolor="black")
            self.matriculevider.configure(insertbackground="black")
            self.matriculevider.configure(selectbackground="#c4c4c4")
            self.matriculevider.configure(selectforeground="black")
            self.vider.click = True
            valider()
        
        """Création du bouton "Vider" """    
        self.vider = Button(top)#vider
        self.vider.click = False
        self.vider.place(relx=0.3, rely=0.01, height=34, width=87)
        self.vider.configure(activebackground="#d9d9d9")
        self.vider.configure(activeforeground="#000000")
        self.vider.configure(background="#e1e9f0")#change color
        self.vider.configure(disabledforeground="#a3a3a3")
        #f=Font(family='Helvetica', size=15, weight='bold')
        self.vider.configure(font=f)
        self.vider.configure(foreground="#000000")
        self.vider.configure(highlightbackground="#d9d9d9")
        self.vider.configure(highlightcolor="black")
        self.vider.configure(pady="0")
        self.vider.configure(text='''Vider''',command=reste_vider)
        testtip.Tooltip(self.vider,text="Pour faire sortir votre voiture du parking veuillez cliquer sur ce bouton et saisissez votre matricule")       
        
       
        
        
        def reste_res(): #permet d'afficher les champs de saisie de la matricule et la date de réservation une fois le bouton "Réserver" est pressé
            """Création du label "Matricule" """
            self.Label3_3 = Label(top)
            self.Label3_3.place(relx=0.52, rely=0.067, height=21, width=104)
            self.Label3_3.configure(activebackground="#f9f9f9")
            self.Label3_3.configure(activeforeground="black")
            self.Label3_3.configure(background="#d9d9d9")
            self.Label3_3.configure(disabledforeground="#a3a3a3")
            self.Label3_3.configure(foreground="#000000")
            self.Label3_3.configure(highlightbackground="#d9d9d9")
            self.Label3_3.configure(highlightcolor="black")
            self.Label3_3.configure(text='''Matricule :''')

            """ Champ de saisie de la matricule """
            self.matriculeres = Entry(top)
            self.matriculeres.place(relx=0.59, rely=0.067,height=20, relwidth=0.16)
            self.matriculeres.configure(background="white")
            self.matriculeres.configure(disabledforeground="#a3a3a3")
            self.matriculeres.configure(foreground="#000000")
            self.matriculeres.configure(highlightbackground="#d9d9d9")
            self.matriculeres.configure(highlightcolor="black")
            self.matriculeres.configure(insertbackground="black")
            self.matriculeres.configure(selectbackground="#c4c4c4")
            self.matriculeres.configure(selectforeground="black")
            
            """Création du label "Choisir une date :" """
            self.Label4 = Label(top)
            self.Label4.place(relx=0.49, rely=0.098, height=21, width=90)
            self.Label4.configure(activebackground="#f9f9f9")
            self.Label4.configure(activeforeground="black")
            self.Label4.configure(background="#d9d9d9")
            self.Label4.configure(disabledforeground="#a3a3a3")
            self.Label4.configure(foreground="#000000")
            self.Label4.configure(highlightbackground="#d9d9d9")
            self.Label4.configure(highlightcolor="black")
            self.Label4.configure(text='''Choisir une date :''')
            
            self.La = Label(top)#date de réservation
            self.La.place(relx=0.564, rely=0.098, height=20, width=180)
            self.La.configure(background="#d9d9d9")
            self.La.configure(foreground="#000000")
            self.ent = DateEntry(self.La,width=15,background="blue",foreground="red",locale='fr_TN', date_pattern='dd/MM/yyyy')
            self.ent.pack()
            
            """Création d'un spinbox pour choisir la date de réservation """
            self.heure = Spinbox(top, from_=0.0, to=23.0)
            self.heure.place(relx=0.679, rely=0.0988, relheight=0.03, relwidth=0.04)
            self.heure.configure(activebackground="#f9f9f9")
            self.heure.configure(background="white")
            self.heure.configure(buttonbackground="#d9d9d9")
            self.heure.configure(disabledforeground="#a3a3a3")
            self.heure.configure(font=font9)
            self.heure.configure(foreground="black")
            self.heure.configure(highlightbackground="black")
            self.heure.configure(highlightcolor="black")
            self.heure.configure(insertbackground="black")
            self.heure.configure(selectbackground="#c4c4c4")
            self.heure.configure(selectforeground="black")
            self.heure.configure(textvariable=StringVar())
            self.heure.configure(to="23.0")

            self.min = Spinbox(top, from_=0.0, to=59.0)
            self.min.place(relx=0.72, rely=0.0988, relheight=0.03, relwidth=0.04)
            self.min.configure(activebackground="#f9f9f9")
            self.min.configure(background="white")
            self.min.configure(buttonbackground="#d9d9d9")
            self.min.configure(disabledforeground="#a3a3a3")
            self.min.configure(font=font9)
            self.min.configure(foreground="black")
            self.min.configure(highlightbackground="black")
            self.min.configure(highlightcolor="black")
            self.min.configure(insertbackground="black")
            self.min.configure(selectbackground="#c4c4c4")
            self.min.configure(selectforeground="black")
            self.min.configure(textvariable=StringVar())
            self.min.configure(to="59.0")
            self.res.click = True
            valider()
        
        """Création du  bouton "Réserver" """            
        self.res = Button(top)#res
        self.res.click = False
        self.res.place(relx=0.57, rely=0.01, height=34, width=87)
        self.res.configure(activebackground="#d9d9d9")
        self.res.configure(activeforeground="#000000")
        self.res.configure(background="#e1e9f0")#change color
        self.res.configure(disabledforeground="#a3a3a3")
        #f=Font(family='Helvetica', size=15, weight='bold')
        self.res.configure(font=f)
        self.res.configure(foreground="#000000")
        self.res.configure(highlightbackground="#d9d9d9")
        self.res.configure(highlightcolor="black")
        self.res.configure(pady="0")
        self.res.configure(text='''Réserver''',command=reste_res)
        testtip.Tooltip(self.res,text="Pour réserver une place pour votre voiture veuillez cliquer sur ce bouton et saisissez votre matricule avec la date dont vous voulez entrer le parking ")       
        
        
        def reste_ann(): #permet d'afficher le champ de saisie de la matricule une fois le bouton "Annuler" est pressé
            """Création du label "Matricule" """
            self.Label3_4 = Label(top)
            self.Label3_4.place(relx=0.759, rely=0.067, height=21, width=104)
            self.Label3_4.configure(activebackground="#f9f9f9")
            self.Label3_4.configure(activeforeground="black")
            self.Label3_4.configure(background="#d9d9d9")
            self.Label3_4.configure(disabledforeground="#a3a3a3")
            self.Label3_4.configure(foreground="#000000")
            self.Label3_4.configure(highlightbackground="#d9d9d9")
            self.Label3_4.configure(highlightcolor="black")
            self.Label3_4.configure(text='''Matricule :''')
            
            """Champ de saise de la matricule """
            self.matriculeann = Entry(top)
            self.matriculeann.place(relx=0.823, rely=0.067,height=20, relwidth=0.16)
            self.matriculeann.configure(background="white")
            self.matriculeann.configure(disabledforeground="#a3a3a3")
            self.matriculeann.configure(foreground="#000000")
            self.matriculeann.configure(highlightbackground="#d9d9d9")
            self.matriculeann.configure(highlightcolor="black")
            self.matriculeann.configure(insertbackground="black")
            self.matriculeann.configure(selectbackground="#c4c4c4")
            self.matriculeann.configure(selectforeground="black")
            self.ann.click = True
            valider()
            
        """Création du bouton "Annuler" """
        self.ann = Button(top)#ann
        self.ann.click = False
        self.ann.place(relx=0.8, rely=0.01, height=34, width=87)
        self.ann.configure(activebackground="#d9d9d9")
        self.ann.configure(activeforeground="#000000")
        self.ann.configure(background="#e1e9f0")#change color
        self.ann.configure(disabledforeground="#a3a3a3")
        #f=Font(family='Helvetica', size=15, weight='bold')
        self.ann.configure(font=f)
        self.ann.configure(foreground="#000000")
        self.ann.configure(highlightbackground="#d9d9d9")
        self.ann.configure(highlightcolor="black")
        self.ann.configure(pady="0")
        self.ann.configure(text='''Annuler''',command=reste_ann)
        testtip.Tooltip(self.ann,text="Pour annuler une réservation veuillez cliquer sur ce bouton et saisissez votre matricule")       
        
        def valider(): #permet de créer le bouton "Valider" une fois un des boutons "Occuper", "Vider", "Réserver" et "Annuler" est pressé
           
            
            """Création du bouton "Valider" """
            self.valide = Button(top)#res
            #self.valide.click = False
            self.valide.place(relx=0.9, rely=0.13, height=34, width=87)
            self.valide.configure(activebackground="#d9d9d9")
            self.valide.configure(activeforeground="#000000")
            self.valide.configure(background="#e1e9f0")#change color
            self.valide.configure(disabledforeground="#a3a3a3")
            
            self.valide.configure(font=f)
            self.valide.configure(foreground="#000000")
            self.valide.configure(highlightbackground="#d9d9d9")
            self.valide.configure(highlightcolor="black")
            self.valide.configure(pady="0")
            self.valide.configure(text='''Valider''',command=submit)
            testtip.Tooltip(self.valide,text="Pour valider vos choix veuillez cliquer sur ce bouton ")       

       
            
    #///////////////////////////////////////////////////////////////////////////       
          
        def submit(): #permet de valider les choix de l'utilisateur une fois le bouton "Valider" est pressé
            global exp
               
            exp="[a-zA-Z0-9]{4,8}"
            global donnee_occ
            donnee_occ=[]             
            if (self.vider.click and len(self.matriculevider.get())==0 )and ( self.res.click and len( self.matriculeres.get())==0 ) and (self.occuper.click and len(self.matriculeocc.get())==0 )and(self.ann.click and len(self.matriculeann.get())==0 ) :
                messagebox.showinfo("Indication","Au moins une opération doit etre remplie!")
            
            else :
                #il faut mentionner les boutons avec len 
                if self.ann.click :
                    self.operation_annuler()
                if self.vider.click :
                    self.operation_vider()
                    
                if self.occuper.click and self.res.click:# occ et res au meme temps
                    self.faire_occRes()
                    
        
                elif self.occuper.click :
                    self.operation_occuper()
                   
                elif self.res.click:
                    self.operation_reserver()
                    
                    
       
        self.draw_board()
        
        self.Canvas1.focus_set()
        
    def clic(self,event): #permet de savoir la position du curseur
            
            print("clic souris :" ,event.x , event.y)
  
    def faire_occRes(self):  # se déclenche si l'utilisateur a choisi de réserver et d'occuper 
        global donnee_occ
        donnee_occ=[]         
        if len(par.libres)==0 :
            messagebox.showinfo("info","Désolé , le parking est complet !")
        elif re.match(exp,self.matriculeocc.get())==None :
                    
            messagebox.showinfo("Indicaion","Vérifiez votre matricule svp !(opération occuper)")
        elif par.MatriculeExiste(self.matriculeocc.get())!=None:
            messagebox.showinfo("info", "Cette voiture existe déjà  dans le parking !!")
            self.operation_reserver()                          
        elif par.OccPossible(self.matriculeocc.get()):
            messagebox.showinfo("info", "Bienvenue vous pouvez bénéficier de votre réservation")                        
            voiture=par.get_voiture_res(self.matriculeocc.get())
            num=par.get_place_reservee(voiture)
            par.occuper(voiture, num)
            self.Canvas1.delete("all")
            self.draw_board()
            self.dessin_chemin(num)
            donnee_occ.extend([voiture.date_entree,self.matriculeocc.get(),num])
            self.ticket_entree(donnee_occ)
    
            self.operation_reserver()
            
        else:
            self.Canvas1.delete("all")
            self.draw_board()
                        
            self.info_plus_proche() 
            def func():
                messagebox.showinfo("Indication","Pour la réservation")
                self.operation_reserver()  

            self.Canvas1.bind('<Button-1>', lambda event:self.choix_occ(event,func))            
            self.occuper.click=False 
            self.matriculeocc.place_forget()
            self.Label3_1.place_forget()
                        
   
    def choix_occ(self,event,func):   # permet l'utilisateur de choisir la place qu'il veut occuper
           
            global donnee_occ
            donnee_occ=[]
            checked=False
        
            for num in range(nbL*nbC+1):
                if num==0 :
                    continue
                else:
                    pos=self.getxy(num)
                    i=pos[0]
                    j=pos[1]  
                    if self.Canvas1.canvasx(event.x)>=i*l+b and self.Canvas1.canvasx(event.x)<=(i+1)*l+b and self.Canvas1.canvasy(event.y)>=j*h+a and self.Canvas1.canvasy(event.y)<=a+(j+1)*h  :
                    
                        
                            messagebox.showinfo("info",str(num))
                            matricule=self.matriculeocc.get()
                            v=par2.Voiture(matricule)
                            rep=par.occuper(v,num)
                            
                            if rep[0] :
                                checked=True 
                                self.Canvas1.bind('<Button-1>', lambda event:self.clic(event))
                                self.Canvas1.delete("all")
                                self.draw_board()
                                self.dessin_chemin(num)
                                donnee_occ.extend([v.date_entree,matricule,num])
                                self.ticket_entree(donnee_occ).wait_window(window=None)#here
                                func()
                                break
                            elif rep[1]==False:
                                checked=True
                                messagebox.showinfo("info","Désolé, Vous ne pouvez pas utiliser cette place maintenant ,veuillez choisir une autre!")
                            else:
                                checked=True
                                messagebox.showinfo("info","Désolé, cette place n'est pas disponible !")
                        
            if not checked :
                messagebox.showinfo("info","Ce n'est pas une place!")    
    def choix_res(self,event): #permet l'utilisateur de choisir la place qu'il veut réserver
            
            
            global donnee_res 
        
            donnee_res=[]
           
            checked=False
            print('clic souris :', event.x , event.y)
           
            for num in range(nbL*nbC+1):
                if num==0 :
                    continue
                else:
                    pos=self.getxy(num)
                    i=pos[0]
                    j=pos[1]  
                    if self.Canvas1.canvasx(event.x)>=i*l+b and self.Canvas1.canvasx(event.x)<=(i+1)*l+b and self.Canvas1.canvasy(event.y)>=j*h+a and self.Canvas1.canvasy(event.y)<=a+(j+1)*h  :
                        
                            messagebox.showinfo("info",str(num))
                            matricule=self.matriculeres.get()
                            v=par2.Voiture(matricule)
                            d=self.ent.get_date()
                           
                            date=datetime(d.year,d.month,d.day,int(self.heure.get()),int(self.min.get()))
                           
                            
                          
                            rep=par.reserver(num,v,date)
                           
                            if rep :
                                checked=True 
                                self.Canvas1.bind('<Button-1>', lambda event:self.clic(event))
                                self.Canvas1.delete("all")
                                self.draw_board()
                                self.dessin_chemin(num)
                                donnee_res.extend([v.date_res,matricule,num])
                                self.ticket_entree(donnee_res)
                                
                               
                                break
                            
                            else:
                                checked=True
                                messagebox.showinfo("info","Désolé, cette place n'est pas disponible !")
                            
                    
            if not checked :
                messagebox.showinfo("info","Ce n'est pas une place!")  
    #/////////////////////les operations//////////////////                    
                           
    def operation_vider(self):  #se déclenche si l'utilisateur a choisi de vider une place
        global donnee_vide 
        donnee_vide=[]
       
        if len(self.matriculevider.get())==0:
            self.vider.click=False
            self.Label3_2.place_forget()
            self.matriculevider.place_forget()
        elif re.match(exp,self.matriculevider.get())==None :
            messagebox.showinfo("Indicaion","Vérifiez votre matricule svp !(opération vider)")
        else:
            matricule=self.matriculevider.get()
            v=par.MatriculeExiste(matricule)
            if v==None :
                messagebox.showinfo("info", "Désolé ,votre voiture n'occupe pas une place dans ce parking !")
            else :
            
                messagebox.showinfo("info","Au revoir !" )
                tarif=par.vider(v) 
                donnee_vide.extend([v.date_entree,v.date_sortie,matricule,tarif])
                self.ticket_sortie(donnee_vide).wait_window(window=None)#here
                self.Canvas1.delete("all")
                self.draw_board()
            self.vider.click=False
            self.Label3_2.place_forget()
            self.matriculevider.place_forget()
        
    def operation_annuler(self): #se déclenche si l'utilisateur a choisi d'annuler une réservation
        if len(self.matriculeann.get())==0:
            self.ann.click=False
            self.matriculeann.place_forget()
            self.Label3_4.place_forget()
                        
        elif re.match(exp,self.matriculeann.get())==None :
            messagebox.showinfo("Indicaion","Vérifiez votre matricule svp !(opération annuler)")
        else:
        
            matricule=self.matriculeann.get()
            v=par.get_voiture_res(matricule)
            if v==None :
                messagebox.showinfo("info", "Désolé ,Aucune réservation n'existe pour cette voiture  !")
            else :   
                par.annuler_reservation(v)  
                messagebox.showinfo("info","votre réservation a éte annulée avec succès !")               
                self.Canvas1.delete("all")
                self.draw_board()
            
            self.ann.click=False
            self.matriculeann.place_forget()
            self.Label3_4.place_forget()
        
    def operation_occuper(self):   #se dÃ©clenche si l'utilisateur a choisi d'occuper une place
        if len(self.matriculeocc.get())==0:
            self.occuper.click=False 
            self.matriculeocc.place_forget()
            self.Label3_1.place_forget()                      
        
        elif re.match(exp,self.matriculeocc.get())==None :
            messagebox.showinfo("Indicaion","Vérifiez votre matricule svp !(opération occuper)")
        elif par.MatriculeExiste(self.matriculeocc.get())!=None:
            messagebox.showinfo("info", "Cette voiture existe déjà  dans le parking !!") 
        elif len(par.libres)==0 :
            messagebox.showinfo("info","Désolé , le parking est complet !") 
        else:
                        
            if par.OccPossible(self.matriculeocc.get()):
                messagebox.showinfo("info", "Bienvenue vous pouvez bénéficier de votre réservation")                        
                voiture=par.get_voiture_res(self.matriculeocc.get())
                num=par.get_place_reservee(voiture)
                par.occuper(voiture, num)
                self.Canvas1.delete("all")
                self.draw_board()
                self.dessin_chemin(num)
                donnee_occ.extend([voiture.date_entree,self.matriculeocc.get(),num])
                self.ticket_entree(donnee_occ)   
            else:                        
                self.Canvas1.delete("all")
                self.draw_board()
                self.info_plus_proche() 
                def func(): #fonction vide
                    pass 
                self.Canvas1.bind('<Button-1>', lambda event:self.choix_occ(event,func))
                        
            self.occuper.click=False 
            self.matriculeocc.place_forget()
            self.Label3_1.place_forget()
            
    def operation_reserver(self):  #se déclenche si l'utilisateur a choisi de réserver une place
       
        if len(self.matriculeres.get())==0:
            self.res.click=False
            self.Label3_3.place_forget()
            self.matriculeres.place_forget()
            self.Label4.place_forget()
            self.heure.place_forget()
            self.min.place_forget()
            self.ent.place_forget()
            self.La.place_forget()
        elif re.match(exp,self.matriculeres.get())==None :
            messagebox.showinfo("Indicaion","Vérifiez votre matricule svp !(opération réserver)")
        elif len(par.libres)==0 :
            messagebox.showinfo("info","Désolé , le parking est complet !")  
        else: 
            d=self.ent.get_date()
            date=datetime(d.year,d.month,d.day,int(self.heure.get()),int(self.min.get()))
            if date<datetime.now():
                messagebox.showinfo("info","Vérifiez svp votre date de réservation !")
            else :
                self.Canvas1.delete("all")
                self.draw_board()
                            #ici
                self.info_plus_proche()
                            
                self.Canvas1.bind('<Button-1>', lambda event:self.choix_res(event))  
                self.res.click=False 
                self.Label3_3.place_forget()
                self.matriculeres.place_forget()
                self.Label4.place_forget()
                self.heure.place_forget()
                self.min.place_forget()
                self.ent.place_forget()
                self.La.place_forget()
                
        
        
        
        
        
        
    #/////////////////////////////////////////////////////////////////////////////////////////////
        
    def draw_board(self):  # avec cette fonction on a dessiné le parking (la coloration des places aussi)
        global im1 , im2 , im4
        
        brun='#984807'  #'#a5502b'  #"#984807"   #"#6a2d00" nouveau couleur 
       
        im1=PhotoImage(file='devant.png',master=self.Canvas1)
        im2=PhotoImage(file='droite.png',master=self.Canvas1)
        
        im4=PhotoImage(file='inter.png',master=self.Canvas1)
        
        p=1
        i=1 #1 ere route
        for x in range (nbC +r ) :
            if x==0 : #1 batiment 
                for y in range(nbL + 5 ):
                    self.Canvas1.create_rectangle(b,y*h+a,l+b,(y+1)*h+a,fill=brun,outline="#c1bebb")
             
            elif x==1 : #1 ere route 
                
                for y in range(nbL + 5 ):
                    if y==0 :
                        self.Canvas1.create_rectangle(b+l,a,2*l+b,h+a,fill=brun,outline="#c1bebb")
                    elif y==1 :
                        self.Canvas1.create_image(b+l,a+h,image=im2,anchor="nw")
                    elif y==nbL+3 :
                        self.Canvas1.create_image(b+l,a+(nbL+3)*h,image=im1,anchor="nw")
                    elif y!=2 and y!=nbL+4 :
                        self.Canvas1.create_rectangle(l+b,y*h+a,2*l+b,(y+1)*h+a,fill="#6b7982",outline="#c4c4c4")
            elif x-i==3 or x==nbC+r-3 :
                
                     
                for y in range(nbL + 5 ):
                    i=x
                    if y==0 or y==nbL+3 or y==nbL+4 : #batiment 
                        self.Canvas1.create_rectangle(b+x*l,y*h+a,(x+1)*l+b,(y+1)*h+a,fill=brun,outline="#c1bebb") 
                    else: #route 
                        if (x-1)%3==0 and y==1 :
                            self.Canvas1.create_image(b+x*l,a +h,image=im4,anchor="nw") 
                        elif x==nbC+r-3 and y==1 :
                            self.Canvas1.create_image(b+(nbC+r-3)*l,a+h,image=im4,anchor="nw")
                             
                        elif y!=2:
                            
                            self.Canvas1.create_rectangle(b+x*l,y*h+a,(x+1)*l+b,(y+1)*h+a,fill="#6b7982",outline="#c4c4c4")
            elif x==nbC+r-1 or x==nbC+r-2:
                for y in range(nbL + 5 ):
                    if y==1 :
                        self.Canvas1.create_rectangle(b+x*l,y*h+a,(x+1)*l+b,(y+1)*h+a,fill="#6b7982",outline="#c4c4c4")
                    else :
                        self.Canvas1.create_rectangle(b+x*l,y*h+a,(x+1)*l+b,(y+1)*h+a,fill=brun,outline="#c1bebb")
            else: #les places 
                
                num=nbL*p
                for y in range(nbL + 5 ):
                    
                    if y==0 or y==nbL+3 or y==nbL+4 : #batiment 
                        self.Canvas1.create_rectangle(b+x*l,y*h+a,(x+1)*l+b,(y+1)*h+a,fill=brun,outline="#c1bebb") 
                    elif y==1 or y==nbL+2 :
                        self.Canvas1.create_rectangle(b+x*l,y*h+a,(x+1)*l+b,(y+1)*h+a,fill="#6b7982",outline="#c4c4c4")
                    else :
                       
                        li=self.Canvas1.create_rectangle(b+x*l,y*h+a,(x+1)*l+b,(y+1)*h+a,fill="#00d15e",outline="#c1bebb")
                        testtip.Tooltip(self.Canvas1,li,text=par.get_matricule(num))    
                        f=Font(family='Helvetica', size=15, weight='bold')
                        lib=self.Canvas1.create_text(b+(x+0.5)*l , a+(y+0.5)*h,text=str(num),font=f)
                        testtip.Tooltip(self.Canvas1,lib,text=par.get_matricule(num))
                        num-=1
                p+=1
    
        if len(par.occupees)!=0 :
            for num in par.occupees :
                pos=self.getxy(num)
                x=pos[0]
                y=pos[1]
                
                rec=self.Canvas1.create_rectangle(b+x*l,y*h+a,(x+1)*l+b,(y+1)*h+a,fill="#f70000",outline="#c1bebb") 
                testtip.Tooltip(self.Canvas1,rec,text=par.get_matricule(num))
                tex=self.Canvas1.create_text(b+(x+0.5)*l ,a+(y+0.5)*h,text=str(num),font=f ,fill="#ff6f6f")
                testtip.Tooltip(self.Canvas1,tex,text=par.get_matricule(num))
        if len(par.reservees)!=0 :
            for num in par.reservees :
                pos=self.getxy(num)
                x=pos[0]
                y=pos[1]
                rec1=self.Canvas1.create_rectangle(b+x*l,y*h+a,(x+1)*l+b,(y+1)*h+a,fill="#0089ea",outline="#c1bebb") 
                testtip.Tooltip(self.Canvas1,rec1,text=par.get_matricule(num))
                tex1=self.Canvas1.create_text(b+(x+0.5)*l ,a+(y+0.5)*h,text=str(num),font=f,fill="#8acdff")
                testtip.Tooltip(self.Canvas1,tex1,text=par.get_matricule(num))       
        bbox = self.Canvas1.bbox("all")
        self.Canvas1.create_rectangle(bbox, outline="black",width=2)  
                  
    def info_plus_proche(self): # permet d'afficher le nombre des places libres et la/les place(s) la/les plus proche(s)  
        L=par.place_plus_proche()
        print (L)
        place=""
        for i in L :
            place+=str(i[0])+","
        text=" Bienvenue! \n Le nombre de places libres est: "+str(len(par.libres))
        if len(L)!=1 :
            text+="\n Les plus proches places libres sont : "
                            
        else:
            text+="\n La plus proche place libre est : "
        text+=place[0:len(place)-1]
        Canva = Canvas(self.top,width=450 ,height=70)
        Canva.place(relx=0.095, rely=0.105)
        Canva.configure(background="#d9d9d9")
        global img
        Canva.create_rectangle(3,3,450,70,fil="#ffffff",outline="#000000",width=2)
        img =PhotoImage(file='bienvenuep.png',master=Canva) #6b7982   
        Canva.create_image(12,5,image=img,anchor="nw")
        
        
        Canva.create_text(180,34,text=text,font=("tahoma","10","bold"),fill="#000000")
        for i in L :
            self.dessin_chemin(i[0])
            pos=self.getxy(i[0])
            x=pos[0]
            y=pos[1]
            self.Canvas1.create_rectangle(b+x*l,y*h+a,(x+1)*l+b ,(y+1)*h+a,outline="#ffff31",width=2) 
            self.dessin_chemin(i[0])  
        
        messagebox.showinfo("Indication","Cliquez pour choisir une place svp !")
        self.Canvas1.delete('all')
        Canva.delete("all")
        Canva.place_forget()
        self.draw_board()              
                
    def getxy(self,num):  # retourne un tuple contenant le numéro de la ligne et le numéro de la colonne d'une place donnée 
        
        if num % nbL==0 :
            y=2
           
        else :
            y= (nbL-num % nbL)+2
          
        
        x=ceil(num/nbL)+1
        x+=(ceil(num/nbL)-1)//2
        return (x,y)
    
        
    def dessin_chemin(self,num): #permet de dessiner le chemin à  suivre par une voiture pour arriver à  une place donnée
        pos=self.getxy(num)
        bs=ceil(num/nbL)
        if bs==1 :
            self.Canvas1.create_line(1.5*l+b,(nbL+3)*h+a,1.5*l+b,pos[1]*h+0.5*h+a,width=3)
            self.Canvas1.create_line(1.5*l+b,pos[1]*h+0.5*h+a,pos[0]*l+0.3*l+b,pos[1]*h+a+0.5*h, arrow='last',width=3)
        
        else:
            self.Canvas1.create_line(1.5*l+b,(nbL+3)*h+a,1.5*l+b,1.5*h+a,width=3)
            if bs%2!=0 :
                self.Canvas1.create_line(1.5*l+b,1.5*h+a,pos[0]*l-0.5*l+b,1.5*h+a,width=3)
                self.Canvas1.create_line(pos[0]*l-0.5*l+b,1.5*h+a,pos[0]*l-0.5*l+b,pos[1]*h+a+0.5*h,width=3)
                self.Canvas1.create_line(pos[0]*l-0.5*l+b,pos[1]*h+a+0.5*h,pos[0]*l+0.3*l+b,pos[1]*h+a+0.5*h, arrow='last',width=3)
            else:
        
                self.Canvas1.create_line(1.5*l+b,1.5*h+a,pos[0]*l+1.5*l+b,1.5*h+a,width=3)
                self.Canvas1.create_line(pos[0]*l+1.5*l+b,1.5*h+a,pos[0]*l+1.5*l+b,pos[1]*h+a+0.5*h,width=3)
                self.Canvas1.create_line(pos[0]*l+1.5*l+b,pos[1]*h+a+0.5*h,pos[0]*l+0.8*l+b,pos[1]*h+a+0.5*h, arrow='last',width=3)
     #//////////////////////////////////création des tickets////////////////////
    def ticket_sortie(self,L=[]): #créer le ticket qui s'affiche en quittant le parking 
        toplevel = Toplevel()
        toplevel.title('Ticket de parking ')
        toplevel.geometry('420x670')
        global c
        c = Canvas(toplevel,width=440 ,height=694)
        c.place(relx=-0.04, rely=-0.039)
        c.bind('<Button-1>',self.clic)
        global image 
        image=PhotoImage(file="sortief.png",master=c)
        c.create_image(14,0,image=image,anchor="nw")
        x = datetime.now()
        c.create_text(120,270,text= x.strftime("%d/%m/%Y %H:%M:%S"),font=('Helvetica', '15'),fill="#425053",anchor="nw")
        c.create_text(261,355,text= L[0].strftime("%d/%m/%Y %H:%M:%S"),font=("tahoma","10","bold"),fill="#425053",anchor="nw")
        c.create_text(100,435,text= L[1].strftime("%d/%m/%Y %H:%M:%S") ,font=("tahoma","10","bold"),fill="#425053",anchor="nw")
        c.create_text(186,393,text=str(L[2]),font=('Helvetica', '15'),fill="#425053",anchor="nw")
        c.create_text(235,495,text=str(L[3])+" DT",font=('Helvetica', '15'),fill="#425053",anchor="nw")
        toplevel.focus_set() 
        return toplevel 
    def ticket_entree(self,L=[]): #créer le ticket qui s'affiche en entrant au parking
        toplevel = Toplevel()
        toplevel.title('Ticket de parking ')
        toplevel.geometry('420x670')
        global ca
        ca = Canvas(toplevel,width=447 ,height=694)
        ca.place(relx=-0.04, rely=-0.025)
        ca.bind('<Button-1>',self.clic)
        global image1 
        image1=PhotoImage(file="entreef.png",master=ca)
        ca.create_image(12.5,15,image=image1,anchor="nw")
        x = datetime.now()
        
        ca.create_text(128,237,text= x.strftime("%d/%m/%Y %H:%M:%S"),font=('Helvetica', '15'),fill="#425053",anchor="nw")
        ca.create_text(188,327,text= L[0].strftime("%d/%m/%Y %H:%M:%S"),font=("tahoma","13","bold"),fill="#425053",anchor="nw")
        ca.create_text(190,362,text= L[1] ,font=("tahoma","13","bold"),fill="#425053",anchor="nw")
        ca.create_text(249,409,text=str(L[2]),font=('Helvetica', '15'),fill="#425053",anchor="nw")
       
        
        toplevel.focus_set()  
        return toplevel
             
             
   
if __name__ == '__main__':
    vp_start_gui()








