#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.16
# In conjunction with Tcl version 8.6
#    Jul 18, 2020 10:33:41 PM CEST  platform: Windows NT

import sys

import parking 
#from cProfile import label

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Log_support



    
def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = Intelligent_Parking (root)
    Log_support.init(root, top)
    root.mainloop()

w = None
def create_Intelligent_Parking(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Intelligent_Parking (w)
    Log_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Intelligent_Parking():
    global w
    w.destroy()
    w = None


    
    
    
class Intelligent_Parking:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {Courier New} -size 10 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font11 = "-family {@Malgun Gothic} -size 12 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"

        top.geometry("800x450")
        top.title("Intelligent Parking")
        top.configure(background="#50cce5")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        def About(): #fonction pour afficher un message en cliquant sur "Aide"
            messagebox.showinfo("Aide", "Bienvenue ,\naffin de créer votre parking veuillez choisir le nombre de lignes et le nombre de colonnes , vous pouvez aussi choisir si votre parking sera vide ou non (les places non vides seront choisies aléatoirement).\nEnfin, cliquez sur valider pour visualiser le parking.")
        def Exit():  #fonction pour quitter l'application en cliquant sur "Quitter"
            #top.destroy()
            MsgBox = messagebox.askquestion ('Quitter',"Voullez-vous quitter l'application ?",icon = 'error')
            if MsgBox == 'yes':
                top.destroy()


        """Création du menu"""
        
        self.menubar = Menu(top,font=font9,bg=_bgcolor,fg=_fgcolor)   
        top.configure(menu = self.menubar)
        self.menubar.add_command(label="Aide", command=About)
        top.config(menu=self.menubar)
        self.menubar.add_command(label="Quitter", command=Exit)
        top.config(menu=self.menubar)
        
        """insertion de l'image """
        self.Label1 = Label(top)
        self.Label1.place(relx=0.56, rely=0.02, height=451, width=324)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self._img1 = PhotoImage(file="par71.png")
        self.Label1.configure(image=self._img1)
        
        
        """création du label "Nombre de lignes" """
        self.Label2 = Label(top)
        self.Label2.place(relx=0.04, rely=0.16, height=21, width=144)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#50cce5")
        self.Label2.configure(disabledforeground="#7a6761")
        self.Label2.configure(font=font11)
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Nombre de lignes :''')

        """ Champ de saisie du nombre de lignes """
        self.lig = Entry(top)
        self.lig.place(relx=0.34, rely=0.17,height=20, relwidth=0.21)
        self.lig.configure(background="white")
        self.lig.configure(disabledforeground="#a3a3a3")
        self.lig.configure(font=font10)
        self.lig.configure(foreground="#000000")
        self.lig.configure(highlightbackground="#d9d9d9")
        self.lig.configure(highlightcolor="black")
        self.lig.configure(insertbackground="black")
        self.lig.configure(selectbackground="#c4c4c4")
        self.lig.configure(selectforeground="black")
        
        """création du label "Nombre de colonnes" """
        self.Label3 = Label(top)
        self.Label3.place(relx=0.04, rely=0.28, height=21, width=174)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#50cce5")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font=font11)
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Nombre de colonnes :''')

        """champ de saisie du nombre de colonnes """
        self.colo = Entry(top)
        self.colo.place(relx=0.34, rely=0.29,height=20, relwidth=0.21)
        self.colo.configure(background="white")
        self.colo.configure(disabledforeground="#a3a3a3")
        self.colo.configure(font=font10)
        self.colo.configure(foreground="#000000")
        self.colo.configure(highlightbackground="#d9d9d9")
        self.colo.configure(highlightcolor="black")
        self.colo.configure(insertbackground="black")
        self.colo.configure(selectbackground="#c4c4c4")
        self.colo.configure(selectforeground="black")

        """Label pour choisir si le parking vide ou non """
        self.Label4 = Label(top)
        self.Label4.place(relx=0.04, rely=0.42, height=21, width=224)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="#000000")
        self.Label4.configure(background="#50cce5")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(font=font11)
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Initialement , le parking est :''')
        
        
        
        def change_vide():#     fonction qui se declenche en cliquant sur "vide"
            if self.Bplein.click is True:
                self.Bplein.click = False
                self.res.place_forget()
                self.occ.place_forget()
                self.Label6.place_forget()
                self.Label5.place_forget()

        """Création du bouton Vide """
        self.Bvide = Button(top,command=change_vide)
        self.Bvide.click = False
        self.Bvide.place(relx=0.34, rely=0.41, height=34, width=63)
        self.Bvide.configure(activebackground="#d9d9d9")
        self.Bvide.configure(activeforeground="#000000")
        self.Bvide.configure(background="#d9d9d9")
        self.Bvide.configure(disabledforeground="#a3a3a3")
        self.Bvide.configure(font=font11)
        self.Bvide.configure(foreground="#000000")
        self.Bvide.configure(highlightbackground="#d9d9d9")
        self.Bvide.configure(highlightcolor="black")
        self.Bvide.configure(pady="0")
        self.Bvide.configure(text='''vide''')



        def reste_login():  #fonction pour afficher les champs de places reservees et places occupees
            #messagebox.showinfo("info", 'choisissez le nombre de places occupées et celui de places reservées')
            
            """creation du label "Nombre de places occupées" """
            self.Label5 = Label(top)#!!!
            self.Label5.place(relx=0.04, rely=0.55, height=21, width=234)
            self.Label5.configure(activebackground="#f9f9f9")
            self.Label5.configure(activeforeground="black")
            self.Label5.configure(background="#50cce5")
            self.Label5.configure(disabledforeground="#a3a3a3")
            self.Label5.configure(font=font11)
            self.Label5.configure(foreground="#000000")
            self.Label5.configure(highlightbackground="#d9d9d9")
            self.Label5.configure(highlightcolor="black")
            self.Label5.configure(text='''Nombre de places occupées :''')
            
            """ champ de saisie du nombre de places occupées """
            self.occ = Entry(top)#!!!!
            self.occ.place(relx=0.34, rely=0.55,height=20, relwidth=0.21)
            self.occ.configure(background="white")
            self.occ.configure(disabledforeground="#a3a3a3")
            self.occ.configure(font=font10)
            self.occ.configure(foreground="#000000")
            self.occ.configure(highlightbackground="#d9d9d9")
            self.occ.configure(highlightcolor="black")
            self.occ.configure(insertbackground="black")
            self.occ.configure(selectbackground="#c4c4c4")
            self.occ.configure(selectforeground="black")

            """creation du label "Nombre de places réservées" """
            self.Label6 = Label(top)#!!!
            self.Label6.place(relx=0.04, rely=0.67, height=21, width=234)
            self.Label6.configure(activebackground="#f9f9f9")
            self.Label6.configure(activeforeground="black")
            self.Label6.configure(background="#50cce5")
            self.Label6.configure(disabledforeground="#a3a3a3")
            self.Label6.configure(font=font11)
            self.Label6.configure(foreground="#000000")
            self.Label6.configure(highlightbackground="#d9d9d9")
            self.Label6.configure(highlightcolor="black")
            self.Label6.configure(text='''Nombre de places réservées :''')
    
            """ champ de saisie du nombre de places réservées """    
            self.res = Entry(top)#!!!!
            self.res.place(relx=0.34, rely=0.68,height=20, relwidth=0.21)
            self.res.configure(background="white")
            self.res.configure(disabledforeground="#a3a3a3")
            self.res.configure(font=font10)
            self.res.configure(foreground="#000000")
            self.res.configure(highlightbackground="#d9d9d9")
            self.res.configure(highlightcolor="black")
            self.res.configure(insertbackground="black")
            self.res.configure(selectbackground="#c4c4c4")
            self.res.configure(selectforeground="black")
            self.Bplein.click = True

                
            
        """creation du bouton "non vide" """
        self.Bplein = Button(top,command=reste_login)
        self.Bplein.click = False#::::
        self.Bplein.place(relx=0.44, rely=0.41, height=34, width=80)
        self.Bplein.configure(activebackground="#d9d9d9")
        self.Bplein.configure(activeforeground="#000000")
        self.Bplein.configure(background="#d9d9d9")
        self.Bplein.configure(disabledforeground="#a3a3a3")
        self.Bplein.configure(font=font11)
        self.Bplein.configure(foreground="#000000")
        self.Bplein.configure(highlightbackground="#d9d9d9")
        self.Bplein.configure(highlightcolor="black")
        self.Bplein.configure(pady="0")
        self.Bplein.configure(text='''non vide''')

   
        def submit1(): #fonction qui permet de valider les choix de l'utilisateur et de visualiser le parking 
            
            global L 
            L=[]
            vlig=vcol=vres=vocc=True 
        
            try:
                int(self.lig.get())
            except ValueError:
                vlig=False
            try:
                int(self.colo.get())
            except ValueError:
                vcol=False
            
           
            if not vlig and len(self.lig.get())!=0  :
                messagebox.showerror("Indication","Le nombre de lignes doit etre numérique !")
            elif not vcol and len(self.colo.get())!=0  :
                messagebox.showerror("Indication","Le nombre de colonnes doit etre numérique !")
            elif len(self.lig.get())==0 or int(self.lig.get())==0:
                messagebox.showerror("Indication","Vérifier le nombre de lignes ")
            elif len(self.colo.get())==0 or int(self.colo.get())==0:
                messagebox.showerror("Indication","Vérifier le nombre de colonnes ")
            else :
                
                if self.Bplein.click is True:#!!
                    try:
                        int(self.occ.get())
                    except ValueError:
                        vocc=False
                    try:
                        int(self.res.get())
                    except ValueError:
                        vres=False
                    finally:
                        if not vocc and len(self.occ.get())!=0:
                            messagebox.showerror("Indication","Le nombre de places occupées doit être numérique")
                        elif len(self.occ.get())==0 :
                            messagebox.showerror("Indication","Vérifier le nombre de places occupées !")
                        elif not vres and len(self.res.get())!=0 :
                            messagebox.showerror("Indication","Le nombre de places reservées doit être numérique")
                        elif len(self.res.get())==0 :
                            messagebox.showerror("Indication","Vérifier le nombre de places reservées !")
                        elif int(self.occ.get())+int(self.res.get())>int(self.colo.get())*int(self.lig.get()):
                            messagebox.showerror("Indication","le nombre de places reservées et occupées ne peut pas être supérieur à la capacité du parking !") 
                        else:
                            L=[self.lig.get(),self.colo.get(),self.occ.get(),self.res.get()]
                            root.withdraw() #to hide the window root.update() root.deiconify() to show it 
                            parking.vp_start_gui(L,root)
                else : 
                   
                    L=[self.lig.get(),self.colo.get()]
                    root.withdraw() #to hide the window root.update() root.deiconify() to show it 
                    parking.vp_start_gui(L,root)            
            
            
        """creation du bouton "valider" """
        self.submit = Button(top,command=submit1)
        self.submit.place(relx=0.43, rely=0.79, height=34, width=87)
        self.submit.configure(activebackground="#d9d9d9")
        self.submit.configure(activeforeground="#000000")
        self.submit.configure(background="#d9d9d9")
        self.submit.configure(disabledforeground="#a3a3a3")
        self.submit.configure(font=font11)
        self.submit.configure(foreground="#000000")
        self.submit.configure(highlightbackground="#d9d9d9")
        self.submit.configure(highlightcolor="black")
        self.submit.configure(pady="0")
        self.submit.configure(text='''Valider''')






if __name__ == '__main__':
    vp_start_gui()



